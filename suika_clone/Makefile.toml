[tasks.default]
clear = true
command = "echo"
args = [
    "\n",
    "************************\n",
    "USAGE:\n",
    " build: Build the project.\n",
    " run: Run the windows-exe file after building it.\n",
    "************************\n",
]



[tasks.prepare-to-build]
run_task = { name = ["copy-src", "copy-assets", "bundle-licenses"] }

[tasks.prepare-directories-src]
command = "mkdir"
args = ["-p", "${CARGO_MAKE_WORKING_DIRECTORY}/src/embedded_assets/fonts"]

[tasks.prepare-directories-assets]
command = "mkdir"
args = ["-p", "${CARGO_MAKE_WORKING_DIRECTORY}/assets/fonts"]

[tasks.copy-src]
command = "cp"
args = ["--update",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/external/x12y12pxMaruMinyaM/x12y12pxMaruMinyaM.ttf",
    "${CARGO_MAKE_WORKING_DIRECTORY}/src/embedded_assets/fonts/",
]
dependencies = ["prepare-directories-src"]

[tasks.copy-assets]
command = "cp"
args = ["--update",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/external/x12y12pxMaruMinyaM/x12y12pxMaruMinyaM.ttf",
    "${CARGO_MAKE_WORKING_DIRECTORY}/assets/fonts/",
]
dependencies = ["prepare-directories-assets"]

[tasks.license]
command = "cargo"
args = ["license"]
install_crate = "cargo-license"

[tasks.bundle-licenses]
command = "cargo"
args = ["bundle-licenses", "--format", "yaml", "--output", "${CARGO_MAKE_WORKING_DIRECTORY}/src/title_screen/licenses.yml"]
install_crate = "cargo-bundle-licenses"

###################################
## Windows (MSVC)

[tasks.build-win-msvc]
command = "cargo"
args = ["build", "--target", "x86_64-pc-windows-msvc"]
dependencies = ["prepare-to-build"]

[tasks.run-win-msvc]
run_task = { name = ["prepare-to-run-msvc", "run-exe", "post-run-win"] }

[tasks.build-release-win-msvc]
command = "cargo"
args = ["build", "--release", "--target", "x86_64-pc-windows-msvc"]
dependencies = ["prepare-to-build"]

[tasks.clear-win-out]
command = "rm"
args = ["-rf", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/out-win/"]

[tasks.prepare-win-out]
command = "mkdir"
args = ["-p", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/out-win/"]

[tasks.copy-exe-to-win-out-msvc]
command = "cp"
args = [
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/x86_64-pc-windows-msvc/release/suika_clone.exe",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/out-win/",
]
dependencies = ["build-release-win-msvc"]

[tasks.copy-assets-to-win-out]
command = "cp"
args = [
    "-r",
    "${CARGO_MAKE_WORKING_DIRECTORY}/assets",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/out-win/",
]

[tasks.release-win-msvc]
run_task = { name = [
    "clear-win-out",
    "prepare-win-out",
    "build-release-win-msvc",
    "copy-exe-to-win-out-msvc",
    "copy-assets-to-win-out",
]}


[tasks.prepare-to-run-msvc]
command = "cp"
args = ["${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/x86_64-pc-windows-msvc/debug/suika_clone.exe", "${CARGO_MAKE_WORKING_DIRECTORY}/"]
dependencies = ["build-win-msvc"]

[tasks.run-exe]
command = "${CARGO_MAKE_WORKING_DIRECTORY}/suika_clone.exe"

[tasks.post-run-win]
command = "rm"
args = ["${CARGO_MAKE_WORKING_DIRECTORY}/suika_clone.exe"]

###################################
### Widnows (GNU)
[tasks.release-win-gnu]
run_task = { name = [
    "clear-win-out",
    "prepare-win-out",
    "build-release-win-gnu",
    "copy-exe-to-win-out-gnu",
    "copy-assets-to-win-out",
]}

[tasks.run-win-gnu]
run_task = { name = ["prepare-to-run-gnu", "run-exe", "post-run-win"] }

[tasks.build-win-gnu]
command = "cargo"
args = ["build", "--target", "x86_64-pc-windows-gnu"]
dependencies = ["prepare-to-build"]

[tasks.prepare-to-run-gnu]
command = "cp"
args = ["${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/x86_64-pc-windows-gnu/debug/suika_clone.exe", "${CARGO_MAKE_WORKING_DIRECTORY}/"]
dependencies = ["build-win-gnu"]

[tasks.build-release-win-gnu]
command = "cargo"
args = ["build", "--release", "--target", "x86_64-pc-windows-gnu"]
dependencies = ["prepare-to-build"]

[tasks.copy-exe-to-win-out-gnu]
command = "cp"
args = [
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/x86_64-pc-windows-gnu/release/suika_clone.exe",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/out-win/",
]
dependencies = ["build-release-win-gnu"]
###################################
### Wasm

[tasks.build-web]
command = "cargo"
args = ["build", "--target", "wasm32-unknown-unknown"]
env = { "ASSETS_DIR_HASH" = { script = ["${CARGO_MAKE_WORKING_DIRECTORY}/scripts/hash.sh ${CARGO_MAKE_WORKING_DIRECTORY}/assets"]} }
dependencies = ["prepare-to-build"]

[tasks.run-web]
command = "cargo"
args = ["run", "--target", "wasm32-unknown-unknown"]
dependencies = ["build-web"]


[tasks.build-release-web]
command = "cargo"
args = ["build", "--release", "--target", "wasm32-unknown-unknown"]
env = { "ASSETS_DIR_HASH" = { script = ["${CARGO_MAKE_WORKING_DIRECTORY}/scripts/hash.sh ${CARGO_MAKE_WORKING_DIRECTORY}/assets"]} }
dependencies = ["prepare-to-build"]

[tasks.clean-web-out]
command = "rm"
args = [
    "-rf",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/out-web",
]

[tasks.wasm-bindgen]
command = "wasm-bindgen"
args = [
    "--no-typescript",
    "--target", "web",
    "--out-dir", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/out-web/",
    "--out-name", "suika_clone_${DIR_HASH}",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/wasm32-unknown-unknown/release/suika_clone.wasm",
]
env = { "DIR_HASH" = { script = ["${CARGO_MAKE_WORKING_DIRECTORY}/scripts/hash.sh ${CARGO_MAKE_WORKING_DIRECTORY}"]} }
install_crate = "wasm-bindgen-cli"
dependencies = ["build-release-web", "clean-web-out"]

[tasks.copy-assets-for-web]
command = "cp"
args = [
    "--update",
    "-r",
    "${CARGO_MAKE_WORKING_DIRECTORY}/assets",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/out-web/",
]

[tasks.copy-index]
command = "cp"
args = [
    "${CARGO_MAKE_WORKING_DIRECTORY}/web-src/index.html",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/out-web/",
]

[tasks.make-index]
command = "sed"
env = { "DIR_HASH" = { script = ["${CARGO_MAKE_WORKING_DIRECTORY}/scripts/hash.sh ${CARGO_MAKE_WORKING_DIRECTORY}"]} }
args = [
    "-i",
    "s/\\[JS_FILE_NAME\\]/suika_clone_${DIR_HASH}/g",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/out-web/index.html",
]
dependencies = ["copy-index"]

[tasks.release-web]
run_task = { name = [
    "build-release-web",
    "wasm-bindgen",
    "copy-assets-for-web",
    "make-index",
] }
